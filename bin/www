#!/usr/bin/env node
var debug = require('debug')('passport-mongo');
var app = require('../app');
var Data1= require('../models/data1');
var request = require('request');
var dbConfig = require('../db');
var mongoose = require('mongoose');

//var app=express();

// Connect to DB
console.log("Connect to DB")
mongoose.connect(dbConfig.url, function(error) {
  console.log("ERROR")
  console.log(error)
});

var db=mongoose.connection;


app.set('port', process.env.PORT || 8080);

var http = require('http').createServer(app);
var io = require('socket.io')(http);

function plotgraph(){
	
	console.log('plot function');
	
	Data1.find({},function (err, kittens1) {
				  if (err){console.log(err)};
				  
	//if (kittens1.length>0){		
		
		console.log(kittens1[0].data1);
		io.emit('plotgraph1', kittens1[0].data1);
	//}
	})
	
}

io.on('connection', function(socket){
	console.log('a user connected');
	plotgraph();

	socket.on('change graph', function(msg){
	      console.log('change graph');
	      msg = msg.replace(/\s/g, '');
	      var stock=msg;
	      var str='https://www.quandl.com/api/v3/datasets/WIKI/'+msg+'.json?column_index=1&start_date=2010-01-01&end_date=2017-01-01&collapse=annual&api_key=c3kCyhGGfJFsLUECjwwV';
	      var options = {
	        
				url: str
				
				};
				request.get(options, function(err,httpResponse,body)
				{ if (err) {console.log('idiot')} 
				var obj=JSON.parse(body); 
				
				if (obj.dataset!=undefined){
					var tmp =obj.dataset.data;
					var data2 =tmp //google.visualization.arrayToDataTable(tmp);
					data2.unshift([stock, stock]);
					
					var STOCK = {name:stock, data: data2 };
					
					Data1.find({},function (err, kittens1) {
						  if (err){};
						  if (kittens1.length<1){
						  var DATA=[];
						  DATA.push(STOCK);
						  var newdata=new Data1;
						  newdata.test='test';
						  newdata.data1=JSON.stringify(DATA);
						  newdata.save();
						  console.log("doc saved");
						  plotgraph();
						  return 0;
						  }
				else
				{
				  	var q=JSON.parse(kittens1[0].data1);
				  	var cntr=0;
				  	
				  	for (var i=0;i<q.length;i++)
				  	{
				  		if (q[i].name==stock)
				  		{cntr++;}
				  	
				  	}
				  	if (cntr<1){
				  	
					  	q.push(STOCK);
					  	Data1.update(
				    		{ test : 'test' },
				    		{ data1: JSON.stringify(q) },
				    	function(err,res){
					    	if (err) {throw err}
					    	console.log("1 doc updated");
					    	
							plotgraph();
					    	return 0;
			    	
				    	}
						)	
						}
				  	else {console.log('already present!')
				  		plotgraph();
				  	}
					  
					  }
					  })
					  }
					  else{
					  	console.log("nostock")
					  	io.emit("nostock","good") }
	            
		});

		})
		
		socket.on('add stock', function(msg){
		io.emit('add stock', msg);
		})
		
		
		socket.on('delete graph', function(msg){
		console.log(msg);
		Data1.find({},function (err, kittens1) {
			if (err){};
			var q=JSON.parse(kittens1[0].data1);
			var j;
			for (var i=0;i<q.length;i++)
			{
			  	if (q[i].name==msg)
			  	{j=i;}
				
			}
			q.splice(j,1);
			Data1.update(
			{ test : 'test' },
			{ data1: JSON.stringify(q) },
			function(err,res){
				if (err) {throw err}
				console.log("1 doc updated");
				plotgraph();
			return 0;
				    }
						)
		})
		})
		})

  http.listen(app.get('port'), function(){
	console.log('listening on *:3000');
});


