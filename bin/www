#!/usr/bin/env node
var debug = require('debug')('passport-mongo');
var app = require('../app');
var Data1= require('../models/data1');
//const express_ = require('express_');

app.set('port', process.env.PORT || 8080);

/*var http_ = require('http').createServer(app);
var io = require('socket.io')(http_);*/

var http = require('http').createServer(app);
var io = require('socket.io')(http);

//io.set('transports', ['xhr-polling']);


var request = require('request');

function plotgraph(){
	console.log('plot function');
	
	Data1.find({},function (err, kittens1) {
				  if (err){};
				  
	if (kittens1.length>0){			  
				  console.log(kittens1[0].data1);

		io.emit('plotgraph1', kittens1[0].data1);
	}
	})
	
}

//console.log(io);

/*io.on('connection', function(socket){
  //if (error) throw error;
  console.log('a user connected');
  //Data1.remove({}, function (err) { if (err) {}  });
  plotgraph();
});*/
/*
io.on('page_loaded', function(msg){
  //if (error) throw error;
  console.log('page_loaded!');
  Data1.find({},function (err, kittens) {
    if (err){};
    io.emit('initial_plot', kittens[0].data1);  
  });
});*/

/*app.get('/', function(req, res){
  res.send('<h1>Hello world</h1>');
});*/

io.on('connection', function(socket){
 /* socket.on('chat message', function(msg){
    console.log('message: ' + msg);
    io.emit('chat message', msg);
  });*/
console.log('a user connected');
  //Data1.remove({}, function (err) { if (err) {}  });
  plotgraph();

socket.on('change graph', function(msg){
      console.log('AHAHAHAH');
      msg = msg.replace(/\s/g, '');
      var stock=msg;
      //console.log('message: ' + msg);
      //console.log(msg.length)
      var str='https://www.quandl.com/api/v3/datasets/WIKI/'+msg+'.json?column_index=1&start_date=2010-01-01&end_date=2017-01-01&collapse=annual&api_key=c3kCyhGGfJFsLUECjwwV';
      var options = {
        
			url: str//'https://www.quandl.com/api/v3/datasets/WIKI/'+'fb'+'.json?column_index=1&collapse=annual&api_key=c3kCyhGGfJFsLUECjwwV'
			
			};
			request.get(options, function(err,httpResponse,body)
			{ if (err) {console.log('idiot')} 
			var obj=JSON.parse(body); 
			
			//console.log(obj);
			if (obj.dataset!=undefined)
			{
			var tmp =obj.dataset.data;
			var data2 =tmp //google.visualization.arrayToDataTable(tmp);
			data2.unshift([stock, stock]);
			
			var STOCK = {name:stock, data: data2 };
			
			
			
			Data1.find({},function (err, kittens1) {
				  if (err){};
				  
				  
				  console.log(kittens1);
				  
				  
				  
				  if (kittens1.length<1){
				  var DATA=[];
					DATA.push(STOCK);
				  var newdata=new Data1;
				  newdata.test='test';
				  newdata.data1=JSON.stringify(DATA);
				  newdata.save();
				  console.log("doc saved");
				  plotgraph();
				  return 0;
				  }
				  else
				  {
				  	
				  	var q=JSON.parse(kittens1[0].data1);
				  	var cntr=0;
				  	
				  	for (var i=0;i<q.length;i++)
				  	{
				  		if (q[i].name==stock)
				  		{cntr++;}
				  	
				  	}
				  	if (cntr<1){
				  	////console.log(q);
				  	q.push(STOCK);
				  	Data1.update(
			    { test : 'test' },
			    { data1: JSON.stringify(q) },
			    function(err,res){
			    	if (err) {throw err}
			    	console.log("1 doc updated");
			    	
					plotgraph();
			    	return 0;
			    	
			    }
					)
				  }
				  	else {console.log('already present!')
				  		plotgraph();
				  	}
				  
				  }
				  })
				  }
				  else{
				  	console.log("you suck")
				  	io.emit("nostock","good") }
            
			
			
});

//
	
	
})

socket.on('add stock', function(msg){
  io.emit('add stock', msg);
})






socket.on('delete graph', function(msg){
  console.log(msg);


//io.emit('add stock', msg);
  Data1.find({},function (err, kittens1) {
				  if (err){};
				  var q=JSON.parse(kittens1[0].data1);
				  	var j;
				  	
				  	for (var i=0;i<q.length;i++)
				  	{
				  		if (q[i].name==msg)
				  		{j=i;}
				  	
				  	}
				  	q.splice(j,1);
				  	Data1.update(
			    { test : 'test' },
			    { data1: JSON.stringify(q) },
			    function(err,res){
			    	if (err) {throw err}
			    	console.log("1 doc updated");
					plotgraph();
			    	return 0;
			    	
			    }
					)
})
})
})
http.listen(app.get('port'), function(){
  console.log('listening on *:3000');
});
/*
var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});*/



//var io = require('socket.io')(app);

